package com.example.portfolio.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountAllPropertiesEquals(UserAccount expected, UserAccount actual) {
        assertUserAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertUserAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountAllUpdatablePropertiesEquals(UserAccount expected, UserAccount actual) {
        assertUserAccountUpdatableFieldsEquals(expected, actual);
        assertUserAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountAutoGeneratedPropertiesEquals(UserAccount expected, UserAccount actual) {
        assertThat(actual)
            .as("Verify UserAccount auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountUpdatableFieldsEquals(UserAccount expected, UserAccount actual) {
        assertThat(actual)
            .as("Verify UserAccount relevant properties")
            .satisfies(a -> assertThat(a.getLogin()).as("check login").isEqualTo(expected.getLogin()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getPassword()).as("check password").isEqualTo(expected.getPassword()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountUpdatableRelationshipsEquals(UserAccount expected, UserAccount actual) {
        // empty method
    }
}
