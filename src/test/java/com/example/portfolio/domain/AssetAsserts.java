package com.example.portfolio.domain;

import static com.example.portfolio.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AssetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetAllPropertiesEquals(Asset expected, Asset actual) {
        assertAssetAutoGeneratedPropertiesEquals(expected, actual);
        assertAssetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetAllUpdatablePropertiesEquals(Asset expected, Asset actual) {
        assertAssetUpdatableFieldsEquals(expected, actual);
        assertAssetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetAutoGeneratedPropertiesEquals(Asset expected, Asset actual) {
        assertThat(actual)
            .as("Verify Asset auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetUpdatableFieldsEquals(Asset expected, Asset actual) {
        assertThat(actual)
            .as("Verify Asset relevant properties")
            .satisfies(a -> assertThat(a.getTicker()).as("check ticker").isEqualTo(expected.getTicker()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a ->
                assertThat(a.getAvgPrice()).as("check avgPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAvgPrice())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetUpdatableRelationshipsEquals(Asset expected, Asset actual) {
        assertThat(actual)
            .as("Verify Asset relationships")
            .satisfies(a -> assertThat(a.getPortfolio()).as("check portfolio").isEqualTo(expected.getPortfolio()));
    }
}
